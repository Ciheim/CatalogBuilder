How to generate 
===============

There are a few ways to use the catalog builder.


Configuration
--------------

Before generating a catalog, the tool must be configured. Catalog headers (column names) are set with the *HEADER LIST* variable. The *OUTPUT PATH TEMPLATE* variable controls the expected directory structure of input data. Both can be configured by editing intakebuilder/builderconfig.py.

.. code-block:: python
 
 #Catalog Headers


 #The headerlist is expected column names in your catalog/csv file. This is usually determined by the users in conjuction
 #with the ESM collection specification standards and the appropriate workflows.

 headerlist = ["activity_id", "institution_id", "source_id", "experiment_id",
                   "frequency", "modeling_realm", "table_id",
                   "member_id", "grid_label", "variable_id",
                   "temporal_subset", "chunk_freq","grid_label","platform","dimensions","cell_methods","path"]


 #Expected Directory Structure
 
 #For a directory structure like /archive/am5/am5/am5f3b1r0/c96L65_am5f3b1r0_pdclim1850F/gfdl.ncrc5-deploy-prod-openmp/pp the output_path_template is set as follows:

 #We have NA in values that do not match up with any of the expected headerlist (CSV columns), otherwise we simply specify the associated header name in the appropriate place. E.g. The third directory in the PP path example above is the model (source_id), so the third list value in output_path_template is set to 'source_id'. We make sure this is a valid value in headerlist as well.

 #The fourth directory is am5f3b1r0 which does not map to an existing header value. So we simply set NA in output_path_template for the fourth value.

 output_path_template = ['NA','NA','source_id','NA','experiment_id','platform','custom_pp','modeling_realm','cell_methods','frequency','chunk_freq']

 output_file_template = ['modeling_realm','temporal_subset','variable_id']

Generation using conda package
______________________________

**1. Install the package using conda:** 

.. code-block:: console

  conda install intakebuilder -c noaa-gfdl

This package contains all dependencies needed to run the catalog builder.

**2. Call the builder** 

Catalogs are generated by the following command:  *gen_intake_gfdl <INPUT_PATH> <OUTPUT_PATH>*

(OUTPUT_PATH should end with the desired output filename WITHOUT a file ending) See example below.

.. code-block:: console

 gen_intake_gfdl /archive/am5/am5/am5f3b1r0/c96L65_am5f3b1r0_pdclim1850F/gfdl.ncrc5-deploy-prod-openmp/pp/ ~/output

This would create a output.CSV and output.JSON in the user's home directory.

`Flags`_. can also be used.

Generation using FRE-CLI
________________________



External Usage (non-GFDL)
-------------------------

[A] 1.setup environment using environment_intake.yml 2. Clone https://github.com/aradhakrishnanGFDL/CatalogBuilder 3. From CatalogBuilder directory, you can import the package. 4. Test: import intakebuilder 5. See examples in examples directory, gen_intake_gfdl.py, gen_intake_local.py runs on UDA , gen_intake_s3.py runs on S3 bucket

or

[B] 1.setup conda environment using environment_intake.yml conda env create -f environment_intake.yml 2. conda activate intake 3. pip install git+https://github.com/aradhakrishnanGFDL/CatalogBuilder.git 4. Test: import intakebuilder 5. See examples in examples directory, gen_intake_local.py runs on UDA , gen_intake_s3.py runs on S3 bucket

Flags
_____

Reference `Flags`_.

To overwrite an existing catalog at the given output path, use the '--overwrite' flag. 

To append to an existing catalog at the given output path, use the '--append' flag.